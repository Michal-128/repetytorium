import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import java.util.*;
import java.util.function.Supplier;

public class RysPanel extends JPanel {
    private BufferedImage canvas;
    private Graphics2D g2d;

    private int startX, startY;
    private boolean dragging = false;

    // wielokąt
    private java.util.List<Point> polygonPoints = new ArrayList<>();
    private boolean drawingPolygon = false;

    private Supplier<String> shapeProvider;
    private Supplier<Color> colorProvider;

    public RysPanel() {
        setPreferredSize(new Dimension(800, 600));
        canvas = new BufferedImage(800, 600, BufferedImage.TYPE_INT_ARGB);
        g2d = canvas.createGraphics();
        clearCanvas();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        MouseAdapter ma = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                String shape = shapeProvider.get();
                if ("Wielokąt".equals(shape)) {
                    // Dodaj punkt do wielokąta
                    polygonPoints.add(new Point(e.getX(), e.getY()));
                    drawingPolygon = true;
                    repaint();
                } else {
                    startX = e.getX();
                    startY = e.getY();
                    dragging = true;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                String shape = shapeProvider.get();
                if ("Wielokąt".equals(shape)) {
                    // jeśli kliknięcie prawe przyciskiem myszy zakończy rysowanie
                    if (SwingUtilities.isRightMouseButton(e) && drawingPolygon && polygonPoints.size() >= 3) {
                        commitPolygon();
                        drawingPolygon = false;
                        polygonPoints.clear();
                        repaint();
                    }
                } else {
                    if (dragging) {
                        int x2 = e.getX();
                        int y2 = e.getY();
                        commitShape(startX, startY, x2, y2);
                        dragging = false;
                        repaint();
                    }
                }
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                String shape = shapeProvider.get();
                if (!"Wielokąt".equals(shape)) {
                    if (dragging) {
                        repaint();
                        Graphics g = getGraphics();
                        drawShapeOnGraphics(g, startX, startY, e.getX(), e.getY());
                        g.dispose();
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                // Podgląd linii od ostatniego punktu wielokąta do kursora
                if (drawingPolygon) {
                    repaint();
                    Graphics g = getGraphics();
                    drawPolygonPreview(g, e.getX(), e.getY());
                    g.dispose();
                }
            }
        };

        addMouseListener(ma);
        addMouseMotionListener(ma);
    }

    public void setShapeProvider(Supplier<String> sp) {
        this.shapeProvider = sp;
    }
    public void setColorProvider(Supplier<Color> cp) {
        this.colorProvider = cp;
    }

    private void commitShape(int x1, int y1, int x2, int y2) {
        g2d.setColor(colorProvider.get());
        drawShapeOnGraphics(g2d, x1, y1, x2, y2);
    }

    private void commitPolygon() {
        g2d.setColor(colorProvider.get());
        int n = polygonPoints.size();
        int[] xs = new int[n];
        int[] ys = new int[n];
        for (int i = 0; i < n; i++) {
            xs[i] = polygonPoints.get(i).x;
            ys[i] = polygonPoints.get(i).y;
        }
        // narysuj wielokąt zamknięty
        g2d.drawPolygon(xs, ys, n);
    }

    private void drawShapeOnGraphics(Graphics g, int x1, int y1, int x2, int y2) {
        String shape = shapeProvider.get();
        g.setColor(colorProvider.get());
        int x = Math.min(x1, x2);
        int y = Math.min(y1, y2);
        int width = Math.abs(x2 - x1);
        int height = Math.abs(y2 - y1);

        switch (shape) {
            case "Prostokąt":
                g.drawRect(x, y, width, height);
                break;
            case "Okrąg":
                g.drawOval(x, y, width, height);
                break;
            case "Linia":
                g.drawLine(x1, y1, x2, y2);
                break;
        }
    }

    private void drawPolygonPreview(Graphics g, int cursorX, int cursorY) {
        if (polygonPoints.isEmpty()) return;
        g.setColor(colorProvider.get());
        Point prev = polygonPoints.get(0);
        for (int i = 1; i < polygonPoints.size(); i++) {
            Point p = polygonPoints.get(i);
            g.drawLine(prev.x, prev.y, p.x, p.y);
            prev = p;
        }
        // ostatnia krawędź do kursora
        Point last = polygonPoints.get(polygonPoints.size() - 1);
        g.drawLine(last.x, last.y, cursorX, cursorY);
    }

    public void clearCanvas() {
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
        repaint();
    }

    public void saveImage() {
        try {
            ImageIO.write(canvas, "PNG", new File("rysunek.png"));
            JOptionPane.showMessageDialog(this, "Zapisano obraz!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Błąd zapisu.");
        }
    }

    public void loadImage() {
        JFileChooser chooser = new JFileChooser();
        int res = chooser.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedImage img = ImageIO.read(chooser.getSelectedFile());
                canvas = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
                g2d = canvas.createGraphics();
                g2d.drawImage(img, 0, 0, null);
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                repaint();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Błąd wczytywania.");
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(canvas, 0, 0, null);
        // jeśli rysujemy wielokąt — pokaż linie między dotychczasowymi punktami
        if (drawingPolygon && !polygonPoints.isEmpty()) {
            drawPolygonPreview(g, -1, -1);  // rysuj linie między wierzchołkami
        }
    }
}
